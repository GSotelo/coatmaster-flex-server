{"version":3,"sources":["components/Screens/Consumption/SprayedPowder/utilities/LineChart.js","assets/svg/programEdit.svg","components/Screens/Consumption/SprayedPowder/utilities/props.js","components/Screens/Consumption/SprayedPowder/utilities/handlersServer.js","components/Screens/Consumption/SprayedPowder/utilities/miscellaneous.js","components/Screens/Consumption/SprayedPowder/SprayedPowder.js","components/UI/Dropdown/Dropdown.js","components/UI/Dropdown/Dropdown.module.css","assets/svg/total.svg","components/UI/Deck/CustomDeck/CustomDeck_2/CustomDeck_2.js","components/UI/Deck/CustomDeck/CustomDeck_2/CustomDeck_2.module.css","components/Screens/Consumption/SprayedPowder/SprayedPowder.module.css"],"names":["layoutSPCTT","colors","enableArea","translateX","xtitle","ytitle","layoutSPCRT","LineChart","layout","data","id","defaultLineData","x","Date","toISOString","y","lineData","length","Line","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","className","d","_ref4","_ref5","_ref6","width","height","_ref7","_ref8","_ref9","_ref10","_ref11","SvgProgramEdit","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","ForwardRef","propsTitleBarSPCRT","icon","type","propsTitleBarSPCTT","propsTitleBarSPCRD","propsTitleBarSPCTD","propsToasterDanger","description","numberOfRecipes","_","range","map","el","text","value","getEndpoint","currentValueDropdown","timeRange","endpoint","getFilename","filename","connectServer","a","timeRangeIsArray","Array","filteredData","connectAPI","get","axiosSprayedPowder","toaster","danger","console","error","post","processDataFromServer","dataFromServer","processDataDeck","run","getDataForDropdown","fallback","response","setCurrentValueDropdown","SprayedPowder","optionsDropdownSPCR","state","api","dataSPCRD","average","avgTimeRange","avgPrevTimeRange","total","totalTimeRange","totalPrevTimeRange","dataSPCTD","dataSPCRT","dataSPCTT","currentTimeRange","currentTimeRangeSPCRD","currentTimeRangeSPCRT","currentTimeRangeSPCTT","currentTimeRangeSPCTD","currentValueDropdownSPCRD","currentValueDropdownSPCRT","currentValueDropdownSPCTD","currentValueDropdownSPCTT","updateDropdownState","e","setState","prevState","dropdownSelector","nextUpdate","getDataFromServer","dataSelector","createContextValues","ids","baseContextValue","fallbackOptionsDropdown","updateDataOnScreen","timerID","setInterval","clearInterval","Promise","all","valueDropdown","contextValue","DeckSPCRD","units","orientation","DeckSPCTD","DropdownHS","Dropdown","options","LineChartSPCRT","LineChartSPCTT","styles","sprayedPowder","left","top","GraphContext","Provider","GraphContainer","graph","bottom","dropdown","right","Component","ControlledDropdown","useContext","placeholder","selection","onChange","module","exports","_ref2","_ref3","points","SvgTotal","setFooterLabel","setFooterValue","Deck","customStyle","horizontalDeck","verticalDeck","configDeck","label","previousValue","cardBox"],"mappings":"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","file":"static/js/19.0dd80e62.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Line from \"../../../../UI/Graph/Line/Line\";\r\n\r\n/**\r\n * General notes:\r\n * The following objects are used to\r\n * customize graph templates (Line, \r\n * Bar, Pie), which can be found in the \r\n * UI folder. The graph templates are \r\n * based on nivo library ;)\r\n */\r\n\r\n/**\r\n * [layoutSPCTT]: Layout for \"Sprayed powder calculated total\" trend (location: top)\r\n */\r\nconst layoutSPCTT = {\r\n  colors: \"#86a315\",\r\n  enableArea: false,\r\n  translateX: -30,\r\n  xtitle: \"Date\",\r\n  ytitle: \"Powder (kg)\"\r\n};\r\n\r\n/**\r\n * [layoutSPCRT]: Layout for \"Sprayed powder calculated recipe\" trend (location: bottom)\r\n */\r\nconst layoutSPCRT = {\r\n  colors: \"#e37222\",\r\n  enableArea: false,\r\n  translateX: -30,\r\n  xtitle: \"Date\",\r\n  ytitle: \"Powder (kg)\"\r\n};\r\n\r\nconst LineChart = ({ data, id }) => {\r\n  let layout;\r\n\r\n  /**\r\n   * SPCTT: Sprayed powder calculated total trend (location: top)\r\n   * SPCRT: Sprayed powder calculated recipe trend (location: bottom)\r\n   */\r\n  if (id === \"SPCTT\") layout = layoutSPCTT;\r\n  if (id === \"SPCRT\") layout = layoutSPCRT;\r\n\r\n  const defaultLineData = [\r\n    {\r\n      id,\r\n      data: [{ x: new Date().toISOString(), y: 0 }]\r\n    }\r\n  ];\r\n\r\n  /**\r\n  *  If express server provides no data, then use the default one.\r\n  */\r\n  const useServerData = typeof data[0].data != \"undefined\" && data[0].data.length > 0;\r\n  const lineData = useServerData ? data : defaultLineData;\r\n\r\n  return (\r\n    <Line {...layout} data={lineData} />\r\n  );\r\n};\r\n\r\nexport default LineChart;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#005293;}.cls-2{fill:none;}\"));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M23,10H13a1,1,0,0,0,0,2H23a1,1,0,0,0,0-2Z\"\n});\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M13,20a1,1,0,0,0,0,2h3l2-2Z\"\n});\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M13,17h8l2-2H13a1,1,0,0,0,0,2Z\"\n});\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"rect\", {\n  className: \"cls-1\",\n  x: 8,\n  y: 15,\n  width: 2,\n  height: 2\n});\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"rect\", {\n  className: \"cls-1\",\n  x: 8,\n  y: 10,\n  width: 2,\n  height: 2\n});\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M12,26H6V6H26v6l2-2V5a1,1,0,0,0-1-1H5A1,1,0,0,0,4,5V27a1,1,0,0,0,1,1h5Z\"\n});\n\nvar _ref9 = /*#__PURE__*/React.createElement(\"rect\", {\n  className: \"cls-1\",\n  x: 8,\n  y: 20,\n  width: 2,\n  height: 2\n});\n\nvar _ref10 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M14,26.67V30h3.33l9.83-9.83-3.33-3.33Zm15.74-9.08a.87.87,0,0,0,0-1.24h0l-2.08-2.08a.87.87,0,0,0-1.24,0h0l-1.63,1.63,3.33,3.33Z\"\n});\n\nvar _ref11 = /*#__PURE__*/React.createElement(\"rect\", {\n  className: \"cls-2\",\n  width: 32,\n  height: 32\n});\n\nfunction SvgProgramEdit(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Ebene_1\",\n    \"data-name\": \"Ebene 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgProgramEdit);\nexport default __webpack_public_path__ + \"static/media/programEdit.798eeaac.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactComponent as Recipe } from \"../../../../../assets/svg/programEdit.svg\";\r\nimport { ReactComponent as Total } from \"../../../../../assets/svg/total.svg\";\r\n\r\nimport _ from \"lodash\";\r\n\r\n/**\r\n * General notes:\r\n * The following objects are used to give proper \r\n * customization to the title bar contained in the \r\n * \"GraphContainer\". Properties for card elements\r\n * are provided here too. I do this in a separate file \r\n * because I don't want to populate the main flow \r\n * of the screen with configuration data for inner\r\n * components. The title bar element can receive \r\n * icons, description text, and dropdown elements \r\n * based on the provided type\r\n */\r\n\r\n/**\r\n * [propsTitleBarSPCRT]: Title bar in \"Sprayed powder calculated recipe\" (trend)\r\n * Title bar: Dropdown, icon and description text (type 3)\r\n */\r\nexport const propsTitleBarSPCRT = {\r\n  icon: <Recipe />,\r\n  title: \"Sprayed powder calculated - Recipe\",\r\n  type: 3\r\n};\r\n\r\n/**\r\n * [propsTitleBarSPCTT]: Title bar in \"Sprayed powder calculated total\" (trend)\r\n * Title bar: Dropdown, icon and description text (type 1)\r\n */\r\nexport const propsTitleBarSPCTT = {\r\n  icon: <Total />,\r\n  title: \"Sprayed powder calculated - Total\",\r\n  type: 1\r\n};\r\n\r\n/**\r\n * [propsTitleBarHSD]: Title bar in \"Sprayed powder calculated recipe\" (deck)\r\n * Title bar: Dropdown, icon and description text (type 3)\r\n */\r\nexport const propsTitleBarSPCRD = {\r\n  icon: <Recipe />,\r\n  title: \"Per recipe\",\r\n  type: 3\r\n};\r\n\r\n/**\r\n * [propsTitleBarSPCTD]: Title bar in \"Sprayed powder calculated total\" (deck)\r\n * Title bar: Dropdown, icon and description text (type 1)\r\n */\r\nexport const propsTitleBarSPCTD = {\r\n  icon: <Total />,\r\n  title: \"Per total\",\r\n  type: 1\r\n};\r\n\r\n/**\r\n * [propsToasterDanger]: Alert configuration if API request fails\r\n */\r\nexport const propsToasterDanger = [\r\n  \"Error\",\r\n  {\r\n    description: \"Resource not found\"\r\n  }\r\n];\r\n\r\n/**\r\n * [propsDropdownSPCR]: Sprayed powder calculted recipe - dropdown options\r\n */\r\n// Text value should be customized\r\nconst numberOfRecipes = _.range(1, 256);\r\nconst createOptionDropdown = el => ({ key: el, text: `R${el}`, value: el });\r\nconst dropdownOptions = _.map(numberOfRecipes, createOptionDropdown);\r\nexport const propsDropdownSPCR = { options: dropdownOptions };\r\n\r\n","import connectAPI from \"../../../../../api/connectAPI\";\r\nimport processDataDeck from \"../../../../../utils/processDataDeck\";\r\nimport { axiosSprayedPowder } from \"../../../../../api/axios\";\r\nimport { propsToasterDanger } from \"./props\";\r\nimport { toaster } from \"evergreen-ui\";\r\n\r\n// When using \"connectAPI\" the axios response is affected by a customized filter function \r\n\r\n/**\r\n * This function works in conjuction with HTTP GET requests\r\n * @param {*} id Helps to determine the endpoint for API requests\r\n * @param {*} timeRange String with value of either \"day\", \"week\", \"month\"\r\n * @returns String containing the API endpoint\r\n */\r\nconst getEndpoint = (currentValueDropdown, id, timeRange) => {\r\n  let endpoint;\r\n  switch (id) {\r\n    case \"SPCRD\":\r\n      endpoint = `/recipes/${currentValueDropdown}/deck-${timeRange}`;\r\n      break;\r\n    case \"SPCTD\":\r\n      endpoint = `/total/deck-${timeRange}`;\r\n      break;\r\n    case \"SPCRT\":\r\n      endpoint = `/recipes/${currentValueDropdown}/${timeRange}`;\r\n      break;\r\n    case \"SPCTT\":\r\n      endpoint = `/total/${timeRange}`;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return endpoint;\r\n};\r\n\r\n/**\r\n * This function works in conjuction with HTTP POST requests\r\n * @param {*} id Helps to determine the filename for executing API requests\r\n * @returns String containing the filename\r\n */\r\nconst getFilename = (currentValueDropdown, id) => {\r\n  let filename;\r\n  switch (id) {\r\n    case \"SPCRD\":\r\n    case \"SPCRT\":\r\n      filename = `sprayed_powder_recipe_${currentValueDropdown}.csv`;\r\n      break;\r\n    case \"SPCTD\":\r\n    case \"SPCTT\":\r\n      filename = `sprayed_powder_total.csv`;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return filename;\r\n};\r\n\r\n/**\r\n * \r\n * @param {*} id Helps to determine either the endpoint or filename for API requests\r\n * @param {*} timeRange String or array of two \"moment\" objects\r\n * @returns Data to feed line chart according to \"nivo\" library\r\n */\r\nconst connectServer = async (currentValueDropdown, id, timeRange) => {\r\n  /**\r\n   * Check is request comes from a control button or date picker\r\n   */\r\n  const timeRangeIsArray = timeRange instanceof Array;\r\n  const timeRangeIsString = typeof timeRange === \"string\";\r\n\r\n  /**\r\n   * If control button, then trigger HTTP GET requests\r\n   */\r\n  if (timeRangeIsString) {\r\n    const endpoint = getEndpoint(currentValueDropdown, id, timeRange);\r\n    let filteredData = false;\r\n    try {\r\n      filteredData = await connectAPI.get(axiosSprayedPowder, endpoint);\r\n    } catch (err) {\r\n      toaster.danger(...propsToasterDanger);\r\n      console.error(\"[connectServer]: Request to server API failed (GET)\");\r\n    }\r\n    return filteredData;\r\n  }\r\n\r\n  /**\r\n  * If date picker, then trigger HTTP POST requests\r\n  */\r\n  if (timeRangeIsArray) {\r\n    const filename = getFilename(currentValueDropdown, id);\r\n    let filteredData = false;\r\n    try {\r\n      filteredData = await connectAPI.post(axiosSprayedPowder, \"/\", { filename, timeRange })\r\n    } catch (error) {\r\n      toaster.danger(...propsToasterDanger);\r\n      console.error(\"[connectServer]: Request to server API failed (POST)\");\r\n    }\r\n    return filteredData;\r\n  }\r\n};\r\n\r\n/**\r\n * Data from server is either for \"trend\" or \"deck\" elements\r\n * If data is for a \"deck\" element, then further processing is needed\r\n * If data is for a \"trend\" element, then it goes straight forward\r\n */\r\nconst processDataFromServer = async (currentValueDropdown, id, timeRange) => {\r\n  let data;\r\n  const dataFromServer = await connectServer(currentValueDropdown, id, timeRange);\r\n\r\n  switch (id) {\r\n    case \"SPCRD\":\r\n    case \"SPCTD\":\r\n      data = processDataDeck.run(dataFromServer, timeRange, 2);\r\n      break;\r\n    case \"SPCRT\":\r\n    case \"SPCTT\":\r\n      data = dataFromServer;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return data;\r\n};\r\nexport default processDataFromServer;\r\n\r\nexport const getDataForDropdown = async (id, fallback) => {\r\n  let response = false;\r\n  try {\r\n    response = await axiosSprayedPowder.get(`/dropdowns/${id}`);\r\n  } catch (error) {\r\n    console.error(\"[getDataForDropdown]: Request to server API failed (GET)\");\r\n    return fallback;\r\n  }\r\n\r\n  return response.data;\r\n};\r\n","export const setCurrentValueDropdown = id => `currentValueDropdown${id}`;","import React, { Component } from 'react';\r\nimport Deck from \"../../../UI/Deck/CustomDeck/CustomDeck_2/CustomDeck_2\";\r\nimport Dropdown from \"../../../UI/Dropdown/Dropdown\";\r\nimport GraphContainer from \"../../../Container/GraphContainer\";\r\nimport GraphContext from \"../../../Context/GraphContext\";\r\nimport LineChart from \"./utilities/LineChart\";\r\nimport { Row, Col } from \"antd\";\r\n\r\nimport styles from \"./SprayedPowder.module.css\";\r\nimport processDataFromServer, { getDataForDropdown } from \"./utilities/handlersServer\";\r\nimport { setCurrentValueDropdown } from \"./utilities/miscellaneous\";\r\nimport {\r\n  propsDropdownSPCR,\r\n  propsTitleBarSPCRD,\r\n  propsTitleBarSPCRT,\r\n  propsTitleBarSPCTD,\r\n  propsTitleBarSPCTT\r\n} from \"./utilities/props\";\r\n\r\nclass SprayedPowder extends Component {\r\n  /**\r\n   * Class fields (Belong to the class itself. Prototype chain not affected) \r\n   * These fields are used by the server to set options for dropdown elements\r\n   */\r\n  optionsDropdownSPCR = [{ key: 1, text: \"R1\", value: 1 }];\r\n\r\n  /**\r\n  * [api]: Contains received data from express server\r\n  * [currentTimeRange]: Contains selected time frame for trend and deck elements\r\n  * [currentValueDropdown]: Contains current value of dropdown for trend and deck elements\r\n  * [dataSPCRD, dataSPCRT, dataSPCTD, dataSPCTT]: Holds data for \"sprayed_powder_total.csv\", \"sprayed_powder_recipe_x.csv\" \r\n  * The \"x\" represents recipe number\r\n  */\r\n  state = {\r\n    api: {\r\n      dataSPCRD: {\r\n        average: {\r\n          avgTimeRange: 0,\r\n          avgPrevTimeRange: 0\r\n        },\r\n        total: {\r\n          totalTimeRange: 0,\r\n          totalPrevTimeRange: 0\r\n        }\r\n      },\r\n      dataSPCTD: {\r\n        average: {\r\n          avgTimeRange: 0,\r\n          avgPrevTimeRange: 0\r\n        },\r\n        total: {\r\n          totalTimeRange: 0,\r\n          totalPrevTimeRange: 0\r\n        }\r\n      },\r\n      dataSPCRT: [],\r\n      dataSPCTT: [],\r\n    },\r\n    currentTimeRange: {\r\n      currentTimeRangeSPCRD: \"week\",\r\n      currentTimeRangeSPCRT: \"week\",\r\n      currentTimeRangeSPCTT: \"week\",\r\n      currentTimeRangeSPCTD: \"week\"\r\n    },\r\n    currentValueDropdown: {\r\n      currentValueDropdownSPCRD: 1,\r\n      currentValueDropdownSPCRT: 1,\r\n      currentValueDropdownSPCTD: 1,\r\n      currentValueDropdownSPCTT: 1,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 1. Fetch data when component mounts for the first time\r\n   * 2. Triggers automatic updates every \"x\" milliseconds\r\n   */\r\n  async componentDidMount() {\r\n    // Load options for dropdowns\r\n    const fallbackOptionsDropdown = [{ key: 1, text: \"R1\", value: 1 }];\r\n    this.optionsDropdownSPCR = await getDataForDropdown(\"recipes\", fallbackOptionsDropdown);\r\n\r\n    // Set automatic updates\r\n    this.updateDataOnScreen();\r\n    this.timerID = setInterval(() => this.updateDataOnScreen(), 10000);\r\n  }\r\n\r\n  // If component unmounts, then free memory resources\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  /**\r\n   * [updateDataOnScreen]: Trigger screen updates every \"x\" millisenconds\r\n   */\r\n  async updateDataOnScreen() {\r\n    // Define id's to target all UI elements\r\n    const { currentTimeRange, currentValueDropdown } = this.state;\r\n    const ids = [\"SPCRD\", \"SPCRT\", \"SPCTD\", \"SPCTT\"];\r\n\r\n    // Get data for all elements\r\n    const data = await Promise.all(ids.map(async (id) => {\r\n      const valueDropdown = currentValueDropdown[`currentValueDropdown${id}`];\r\n      const timeRange = currentTimeRange[`currentTimeRange${id}`];\r\n      return await processDataFromServer(valueDropdown, id, timeRange);\r\n    }));\r\n\r\n    // Update state for all components\r\n    this.setState(\r\n      {\r\n        api:\r\n        {\r\n          dataSPCRD: data[0],\r\n          dataSPCRT: data[1],\r\n          dataSPCTD: data[2],\r\n          dataSPCTT: data[3]\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * [updateDropdownState]: Update value of dropdown element\r\n   * [id]: Helps to determine the correct dropdown element\r\n   * [value]: Value of dropdown element\r\n   * [e]: Synthetic event. The event is used internally by UI library \r\n   */\r\n  updateDropdownState = (e, { value }, id) => this.setState(prevState => {\r\n    const dropdownSelector = `currentValueDropdown${id}`;\r\n    const nextUpdate = { ...prevState };\r\n    nextUpdate.currentValueDropdown[dropdownSelector] = value;\r\n    return { nextUpdate };\r\n  })\r\n\r\n  /**\r\n   * [getDataFromServer]: Establish connection to express server via HTTP requests (GET, POST)\r\n   * [id]: Helps to determine the correct endpoint, filename and axios instance\r\n   * [timeRange]: It can be a string (\"day\", \"week\", \"month\") or an array of two \"moment\" objects\r\n   */\r\n  getDataFromServer = async (id, timeRange) => {\r\n    // Update value of selected dropdown\r\n    const currentValueDropdown = this.state.currentValueDropdown[setCurrentValueDropdown(id)];\r\n\r\n    /**\r\n    * Response data from server API. The data is formatted \r\n    * based on nivo library. If an error comes up, then \r\n    * \"dataFromServer\" is \"false\". Though I can exit the \r\n    * function at this point, I'll let it continue. Trends and \r\n    * deck elements handle the event of no-data using fallback data \r\n    */\r\n    const dataFromServer = await processDataFromServer(currentValueDropdown, id, timeRange);\r\n\r\n    // Update state of all elements\r\n    this.setState(prevState => {\r\n      const dataSelector = `data${id}`;\r\n      const currentTimeRange = `currentTimeRange${id}`;\r\n      const nextUpdate = { ...prevState };\r\n      nextUpdate.currentTimeRange[currentTimeRange] = timeRange;\r\n      nextUpdate.api[dataSelector] = dataFromServer;\r\n      return { nextUpdate };\r\n    });\r\n  }\r\n\r\n  /**\r\n  * @param {*} ids Arrays of ids (i.e \"SPCTT\", \"SPCRT\", \"SPCTD\", \"SPCRD\")\r\n  * @returns Array of context values for graphs\r\n  */\r\n  createContextValues = (ids) => {\r\n    const { currentValueDropdown } = this.state;\r\n    const { getDataFromServer, updateDropdownState } = this;\r\n    const baseContextValue = { getDataFromServer, updateDropdownState };\r\n\r\n    return ids.map(id => (\r\n      {\r\n        ...baseContextValue,\r\n        id,\r\n        currentValueDropdown: currentValueDropdown[`currentValueDropdown${id}`]\r\n      }\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    // Extract some class methods / fields\r\n    const { createContextValues, optionsDropdownSPCR } = this;\r\n\r\n    // Data from express server\r\n    const { dataSPCRD, dataSPCRT, dataSPCTD, dataSPCTT } = this.state.api;\r\n\r\n    // Current time range for elements\r\n    const { currentTimeRangeSPCRD, currentTimeRangeSPCTD } = this.state.currentTimeRange;\r\n\r\n    // Create context values\r\n    const ids = [\"SPCTT\", \"SPCRT\", \"SPCTD\", \"SPCRD\"];\r\n    const contextValue = createContextValues(ids);\r\n\r\n    // Deck UI components\r\n    const DeckSPCRD = <Deck data={dataSPCRD} timeRange={currentTimeRangeSPCRD} units=\"kg\" orientation=\"h\" />;\r\n    const DeckSPCTD = <Deck data={dataSPCTD} timeRange={currentTimeRangeSPCTD} units=\"kg\" orientation=\"h\" />;\r\n\r\n    // Dropdown UI components (Static vs. Dynamic)\r\n    // const DropdownHS = <Dropdown {...propsDropdownSPCR} />;\r\n    const DropdownHS = <Dropdown options={optionsDropdownSPCR} />;\r\n\r\n    // Line chart UI components\r\n    const LineChartSPCRT = <LineChart id=\"SPCRT\" data={[{ id: \"Recipe\", data: dataSPCRT }]} />;\r\n    const LineChartSPCTT = <LineChart id=\"SPCTT\" data={[{ id: \"Total\", data: dataSPCTT }]} />;\r\n\r\n    return (\r\n      <Row className={styles.sprayedPowder}>\r\n        <Col className={styles.left}>\r\n          <div className={styles.top}>\r\n            <GraphContext.Provider value={contextValue[0]}>\r\n              <GraphContainer {...propsTitleBarSPCTT} graph={LineChartSPCTT} />\r\n            </GraphContext.Provider>\r\n          </div>\r\n\r\n          <div className={styles.bottom}>\r\n            <GraphContext.Provider value={contextValue[1]}>\r\n              <GraphContainer {...propsTitleBarSPCRT} graph={LineChartSPCRT} dropdown={DropdownHS} />\r\n            </GraphContext.Provider>\r\n          </div>\r\n        </Col>\r\n\r\n        <Col className={styles.right}>\r\n          <div className={styles.top}>\r\n            <GraphContext.Provider value={contextValue[2]}>\r\n              <GraphContainer {...propsTitleBarSPCTD} graph={DeckSPCTD} />\r\n            </GraphContext.Provider>\r\n          </div>\r\n\r\n          <div className={styles.bottom}>\r\n            <GraphContext.Provider value={contextValue[3]}>\r\n              <GraphContainer {...propsTitleBarSPCRD} graph={DeckSPCRD} dropdown={DropdownHS} />\r\n            </GraphContext.Provider>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SprayedPowder;","import React, { useContext } from \"react\";\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport GraphContext  from \"../../Context/GraphContext\";\r\n\r\nimport styles from \"./Dropdown.module.css\";\r\n\r\nconst ControlledDropdown = ({ options }) => {\r\n\r\n  const { id, currentValueDropdown, updateDropdownState } = useContext(GraphContext);\r\n\r\n  return (\r\n    <Dropdown\r\n      className={styles.dropdown}\r\n      options={options}\r\n      placeholder=\"Select\"\r\n      selection\r\n      onChange={(e, { value }) => updateDropdownState(e, { value }, id)}\r\n      value={currentValueDropdown}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ControlledDropdown;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"Dropdown_dropdown__37I9C\"};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#005293;}.cls-2{fill:none;}\"));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-1\",\n  points: \"26 28 4.89 28 14.71 16 4.89 4 26 4 26 9 24 9 24 6 9.11 6 17.29 16 9.11 26 24 26 24 23 26 23 26 28\"\n});\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"rect\", {\n  className: \"cls-2\",\n  width: 32,\n  height: 32\n});\n\nfunction SvgTotal(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Ebene_1\",\n    \"data-name\": \"Ebene 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgTotal);\nexport default __webpack_public_path__ + \"static/media/total.8daf7d1c.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport Card from \"../../../Card/CardWithFooter/CardWithFooter\";\r\n\r\nimport processDataDeck from \"../../../../../utils/processDataDeck\";\r\nimport styles from \"./CustomDeck_2.module.css\";\r\nimport { ReactComponent as Total } from \"../../../../../assets/svg/total.svg\";\r\nimport { ReactComponent as Average } from \"../../../../../assets/svg/average.svg\";\r\n\r\nconst { setFooterLabel, setFooterValue } = processDataDeck;\r\n\r\n/**\r\n * This component renders card elements for\r\n * showing total and average values. It can \r\n * be found on the following screens:\r\n * \"Fresh powder\"\r\n */\r\nconst Deck = ({ data, timeRange, units, orientation }) => {\r\n  // Controlling how cards are displayed (horizontally or vertically)\r\n  let customStyle;\r\n  if (orientation === \"h\") {\r\n    customStyle = styles.horizontalDeck;\r\n  }\r\n\r\n  if (orientation === \"v\") {\r\n    customStyle = styles.verticalDeck;\r\n  }\r\n\r\n  // The structure \"data\" is defined by the \"state\" object of each \"Screen\" component\r\n  const { avgTimeRange, avgPrevTimeRange } = data.average;\r\n  const { totalTimeRange, totalPrevTimeRange } = data.total;\r\n\r\n  /**\r\n   *  Configuration for each \"Card\" element.\r\n   *  1st element: Total value\r\n   *  2nd element: Average value\r\n   */\r\n  const configDeck = [\r\n    {\r\n      id: \"total\",\r\n      icon: <Total />,\r\n      label: setFooterLabel(timeRange, totalTimeRange, totalPrevTimeRange),\r\n      previousValue: setFooterValue(timeRange, totalPrevTimeRange, units),\r\n      units,\r\n      value: totalTimeRange,\r\n    },\r\n    {\r\n      id: \"average\",\r\n      icon: <Average />,\r\n      label: setFooterLabel(timeRange, avgTimeRange, avgPrevTimeRange),\r\n      previousValue: setFooterValue(timeRange, avgPrevTimeRange, units),\r\n      units,\r\n      value: avgTimeRange,\r\n    },\r\n  ];\r\n\r\n  // Custom deck UI component\r\n  return (\r\n    <div className={customStyle}>\r\n      {\r\n        configDeck.map(el => (\r\n          <div\r\n            className={styles.cardBox}\r\n            key={el.id}\r\n          >\r\n            <Card {...el} />\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\nexport default Deck;\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"horizontalDeck\":\"CustomDeck_2_horizontalDeck__2vFQQ\",\"cardBox\":\"CustomDeck_2_cardBox__bTPC8\",\"verticalDeck\":\"CustomDeck_2_verticalDeck__eN4Hs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sprayedPowder\":\"SprayedPowder_sprayedPowder__3f-n5\",\"left\":\"SprayedPowder_left__2lpTI\",\"top\":\"SprayedPowder_top__3Wocp\",\"bottom\":\"SprayedPowder_bottom__2ZoTd\",\"right\":\"SprayedPowder_right__2N1Iy\"};"],"sourceRoot":""}